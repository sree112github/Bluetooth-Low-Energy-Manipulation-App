#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <WiFi.h>  // Include Wi-Fi library

#define SERVICE_UUID        "12345678-1234-5678-1234-56789abcdef0"
#define CHARACTERISTIC_UUID "abcdef12-3456-7890-abcd-ef1234567890"

BLECharacteristic *pCharacteristic;
bool deviceConnected = false;
bool awaitingWiFiCreds = false;
String pendingSSID = "";

class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
    Serial.println("Client connected");

    // Send "Connection established"
    String response = "Connection established";
    pCharacteristic->setValue(response);
    pCharacteristic->notify();
  }

  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
    Serial.println("Client disconnected");

    // Restart advertising
    pServer->getAdvertising()->start();
  }
};

class MyCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic *pChar) {
    String rxValue = pChar->getValue();

    if (rxValue.length() > 0) {
      Serial.print("Received from Flutter: ");
      Serial.println(rxValue);

      if (rxValue == "scanNetworks") {
        int n = WiFi.scanNetworks();
        String response = "Available Networks:\n";

        for (int i = 0; i < n; ++i) {
          response += WiFi.SSID(i);
          if (i < n - 1) response += ",";
        }

        pChar->setValue(response);
        pChar->notify();
        Serial.println("Sent back: " + response);
      } else if (rxValue.startsWith("ssid:")) {
        pendingSSID = rxValue.substring(5);  // Get SSID value
        awaitingWiFiCreds = true;
        Serial.println("SSID received: " + pendingSSID);
        pChar->setValue("SSID received, waiting for password");
        pChar->notify();
      } else if (rxValue.startsWith("pass:") && awaitingWiFiCreds) {
        String password = rxValue.substring(5);
        Serial.println("Password received: " + password);

        WiFi.begin(pendingSSID.c_str(), password.c_str());

        int tries = 0;
        while (WiFi.status() != WL_CONNECTED && tries < 10) {
          delay(1000);
          Serial.print(".");
          tries++;
        }

        if (WiFi.status() == WL_CONNECTED) {
          pChar->setValue("wifi connected");
          Serial.println("\nWiFi connected");
        } else {
          pChar->setValue("wifi connection failed");
          Serial.println("\nWiFi connection failed");
        }

        pChar->notify();
        awaitingWiFiCreds = false;
        pendingSSID = "";
      } else {
        // Unknown command
        String response = "i got it";
        pChar->setValue(response);
        pChar->notify();
        Serial.println("Sent back: i got it");
      }
    }
  }
};

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);  // Put Wi-Fi in Station Mode
  WiFi.disconnect();    // Disconnect from any previous connection

  BLEDevice::init("ESP32_BLE");
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService *pService = pServer->createService(SERVICE_UUID);

  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_WRITE |
                      BLECharacteristic::PROPERTY_NOTIFY
                    );

  pCharacteristic->setCallbacks(new MyCallbacks());

  pService->start();

  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->start();
  Serial.println("ESP32 BLE server is advertising...");
}

void loop() {
  // Nothing needed here
}
